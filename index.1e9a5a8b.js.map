{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        var _this = this;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\";\n        if (initialState) this.board = (0, $227c6742e0ff6f82$export$71511d61b312f219)(initialState);\n        else this.board = Array.from({\n            length: this.size\n        }, function() {\n            return Array(_this.size).fill(0);\n        });\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var moved = false;\n                for(var row = 0; row < this.size; row++){\n                    var originalRow = this.board[row];\n                    var newRow = this.mergeRow(originalRow);\n                    if (!this.arraysCompare(originalRow, newRow)) {\n                        this.board[row] = newRow;\n                        moved = true;\n                    }\n                }\n                if (moved) {\n                    this.addRandomTile();\n                    this.getStatus();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var moved = false;\n                for(var row = 0; row < this.size; row++){\n                    var originalRow = this.board[row];\n                    var reversedRow = originalRow.slice().reverse();\n                    var newRowReversed = this.mergeRow(reversedRow);\n                    var newRow = newRowReversed.reverse();\n                    if (!this.arraysCompare(originalRow, newRow)) {\n                        this.board[row] = newRow;\n                        moved = true;\n                    }\n                }\n                if (moved) {\n                    this.addRandomTile();\n                    this.getStatus();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var moved = false;\n                for(var col = 0; col < this.size; col++){\n                    var column = [];\n                    for(var row = 0; row < this.size; row++)column.push(this.board[row][col]);\n                    var newColumn = this.mergeRow(column);\n                    for(var row1 = 0; row1 < this.size; row1++)if (this.board[row1][col] !== newColumn[row1]) {\n                        this.board[row1][col] = newColumn[row1];\n                        moved = true;\n                    }\n                }\n                if (moved) {\n                    this.addRandomTile();\n                    this.getStatus();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var moved = false;\n                for(var col = 0; col < this.size; col++){\n                    var column = [];\n                    for(var row = 0; row < this.size; row++)column.push(this.board[row][col]);\n                    var reversedColumn = column.reverse();\n                    var newColumnReversed = this.mergeRow(reversedColumn);\n                    var newColumn = newColumnReversed.reverse();\n                    for(var row1 = 0; row1 < this.size; row1++)if (this.board[row1][col] !== newColumn[row1]) {\n                        this.board[row1][col] = newColumn[row1];\n                        moved = true;\n                    }\n                }\n                if (moved) {\n                    this.addRandomTile();\n                    this.getStatus();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return (0, $227c6742e0ff6f82$export$71511d61b312f219)(this.board);\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                if (this.status === \"win\" || this.status === \"lose\") return this.status;\n                // Перевірка на перемогу\n                for(var row = 0; row < this.size; row++){\n                    for(var col = 0; col < this.size; col++)if (this.board[row][col] === 2048) {\n                        this.status = \"win\";\n                        return this.status;\n                    }\n                }\n                if (!this.canMove()) {\n                    this.status = \"lose\";\n                    return this.status;\n                }\n                this.status = \"playing\";\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                var _this = this;\n                this.board = Array.from({\n                    length: this.size\n                }, function() {\n                    return Array(_this.size).fill(0);\n                });\n                this.score = 0;\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                var _this = this;\n                this.board = Array.from({\n                    length: this.size\n                }, function() {\n                    return Array(_this.size).fill(0);\n                });\n                this.score = 0;\n                this.status = \"idle\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < this.size; row++){\n                    for(var col = 0; col < this.size; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length === 0) return;\n                var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], r = _emptyCells_Math_floor.row, c = _emptyCells_Math_floor.col;\n                this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n            }\n        },\n        {\n            key: \"mergeRow\",\n            value: function mergeRow(row) {\n                var filtered = row.filter(function(value) {\n                    return value !== 0;\n                });\n                var result = [];\n                for(var i = 0; i < filtered.length; i++)if (filtered[i] === filtered[i + 1]) {\n                    var mergedValue = filtered[i] * 2;\n                    result.push(mergedValue);\n                    this.score += mergedValue;\n                    i++;\n                } else result.push(filtered[i]);\n                while(result.length < row.length)result.push(0);\n                return result;\n            }\n        },\n        {\n            key: \"arraysCompare\",\n            value: function arraysCompare(arr1, arr2) {\n                return arr1.every(function(value, index) {\n                    return value === arr2[index];\n                });\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                for(var row = 0; row < this.size; row++)for(var col = 0; col < this.size; col++){\n                    var value = this.board[row][col];\n                    if (value === 0) return true;\n                    if (col < this.size - 1 && this.board[row][col + 1] === value) return true;\n                    if (row < this.size - 1 && this.board[row + 1][col] === value) return true;\n                }\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n$197cd56b15c33885$var$getStatusMessage();\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".button.start\");\nvar $197cd56b15c33885$var$restartButton = document.querySelector(\".button.restart\");\nvar $197cd56b15c33885$var$scores = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$cells = document.querySelectorAll(\".field-cell\");\nfunction $197cd56b15c33885$var$renderBoard() {\n    var state = $197cd56b15c33885$var$game.getState();\n    for(var row = 0; row < $197cd56b15c33885$var$game.size; row++)for(var col = 0; col < $197cd56b15c33885$var$game.size; col++){\n        var value = state[row][col];\n        var index = row * 4 + col;\n        $197cd56b15c33885$var$cells[index].textContent = value === 0 ? \"\" : value;\n    }\n    $197cd56b15c33885$var$styleCells();\n}\nfunction $197cd56b15c33885$var$renderScore() {\n    $197cd56b15c33885$var$scores.textContent = $197cd56b15c33885$var$game.score;\n}\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$renderBoard();\n    $197cd56b15c33885$var$renderScore();\n    $197cd56b15c33885$var$getStatusMessage();\n});\n$197cd56b15c33885$var$restartButton.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$renderBoard();\n    $197cd56b15c33885$var$renderScore();\n    $197cd56b15c33885$var$getStatusMessage();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if ($197cd56b15c33885$var$game.status !== \"playing\") return;\n    var moved = false;\n    if (e.key === \"ArrowLeft\") {\n        $197cd56b15c33885$var$game.moveLeft();\n        moved = true;\n    }\n    if (e.key === \"ArrowRight\") {\n        $197cd56b15c33885$var$game.moveRight();\n        moved = true;\n    }\n    if (e.key === \"ArrowUp\") {\n        $197cd56b15c33885$var$game.moveUp();\n        moved = true;\n    }\n    if (e.key === \"ArrowDown\") {\n        $197cd56b15c33885$var$game.moveDown();\n        moved = true;\n    }\n    if (moved) {\n        $197cd56b15c33885$var$renderBoard();\n        $197cd56b15c33885$var$renderScore();\n        $197cd56b15c33885$var$getStatusMessage();\n    }\n});\nfunction $197cd56b15c33885$var$getStatusMessage() {\n    var winMessage = document.querySelector(\".message-win\");\n    var loseMessage = document.querySelector(\".message-lose\");\n    var startMessage = document.querySelector(\".message-start\");\n    var gameStatus = $197cd56b15c33885$var$game.status;\n    if (gameStatus === \"win\") winMessage.classList.remove(\"hidden\");\n    if (gameStatus === \"lose\") loseMessage.classList.remove(\"hidden\");\n    if (gameStatus === \"playing\") startMessage.classList.add(\"hidden\");\n}\nfunction $197cd56b15c33885$var$styleCells() {\n    $197cd56b15c33885$var$cells.forEach(function(cell) {\n        var num = cell.textContent;\n        cell.classList.forEach(function(cls) {\n            if (cls.startsWith(\"field-cell--\")) cell.classList.remove(cls);\n        });\n        if (num) cell.classList.add(\"field-cell--\".concat(num));\n    });\n}\n\n})();\n//# sourceMappingURL=index.1e9a5a8b.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ngetStatusMessage();\n\nconst startButton = document.querySelector('.button.start');\nconst restartButton = document.querySelector('.button.restart');\nconst scores = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\n\nfunction renderBoard() {\n  const state = game.getState();\n\n  for (let row = 0; row < game.size; row++) {\n    for (let col = 0; col < game.size; col++) {\n      const value = state[row][col];\n      const index = row * 4 + col;\n\n      cells[index].textContent = value === 0 ? '' : value;\n    }\n  }\n\n  styleCells();\n}\n\nfunction renderScore() {\n  scores.textContent = game.score;\n}\n\nstartButton.addEventListener('click', () => {\n  game.start();\n  renderBoard();\n  renderScore();\n  getStatusMessage();\n});\n\nrestartButton.addEventListener('click', () => {\n  game.restart();\n  renderBoard();\n  renderScore();\n  getStatusMessage();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.status !== 'playing') {\n    return;\n  }\n\n  let moved = false;\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n    moved = true;\n  }\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n    moved = true;\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n    moved = true;\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n    moved = true;\n  }\n\n  if (moved) {\n    renderBoard();\n    renderScore();\n    getStatusMessage();\n  }\n});\n\nfunction getStatusMessage() {\n  const winMessage = document.querySelector('.message-win');\n  const loseMessage = document.querySelector('.message-lose');\n  const startMessage = document.querySelector('.message-start');\n\n  const gameStatus = game.status;\n\n  if (gameStatus === 'win') {\n    winMessage.classList.remove('hidden');\n  }\n\n  if (gameStatus === 'lose') {\n    loseMessage.classList.remove('hidden');\n  }\n\n  if (gameStatus === 'playing') {\n    startMessage.classList.add('hidden');\n  }\n}\n\nfunction styleCells() {\n  cells.forEach((cell) => {\n    const num = cell.textContent;\n\n    cell.classList.forEach((cls) => {\n      if (cls.startsWith('field-cell--')) {\n        cell.classList.remove(cls);\n      }\n    });\n\n    if (num) {\n      cell.classList.add(`field-cell--${num}`);\n    }\n  });\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n\n    if (initialState) {\n      this.board = [...initialState];\n    } else {\n      this.board = Array.from({ length: this.size }, () => {\n        return Array(this.size).fill(0);\n      });\n    }\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const originalRow = this.board[row];\n      const newRow = this.mergeRow(originalRow);\n\n      if (!this.arraysCompare(originalRow, newRow)) {\n        this.board[row] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.getStatus();\n    }\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const originalRow = this.board[row];\n      const reversedRow = originalRow.slice().reverse();\n      const newRowReversed = this.mergeRow(reversedRow);\n      const newRow = newRowReversed.reverse();\n\n      if (!this.arraysCompare(originalRow, newRow)) {\n        this.board[row] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.getStatus();\n    }\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const column = [];\n\n      for (let row = 0; row < this.size; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      const newColumn = this.mergeRow(column);\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.board[row][col] !== newColumn[row]) {\n          this.board[row][col] = newColumn[row];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.getStatus();\n    }\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const column = [];\n\n      for (let row = 0; row < this.size; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      const reversedColumn = column.reverse();\n\n      const newColumnReversed = this.mergeRow(reversedColumn);\n      const newColumn = newColumnReversed.reverse();\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.board[row][col] !== newColumn[row]) {\n          this.board[row][col] = newColumn[row];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.getStatus();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return [...this.board];\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.status === 'win' || this.status === 'lose') {\n      return this.status;\n    }\n\n    // Перевірка на перемогу\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 2048) {\n          this.status = 'win';\n\n          return this.status;\n        }\n      }\n    }\n\n    if (!this.canMove()) {\n      this.status = 'lose';\n\n      return this.status;\n    }\n\n    this.status = 'playing';\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.board = Array.from({ length: this.size }, () => {\n      return Array(this.size).fill(0);\n    });\n\n    this.score = 0;\n    this.status = 'playing';\n\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = Array.from({ length: this.size }, () => {\n      return Array(this.size).fill(0);\n    });\n\n    this.score = 0;\n    this.status = 'idle';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const { row: r, col: c } =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  mergeRow(row) {\n    const filtered = row.filter((value) => value !== 0);\n    const result = [];\n\n    for (let i = 0; i < filtered.length; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        const mergedValue = filtered[i] * 2;\n\n        result.push(mergedValue);\n        this.score += mergedValue;\n        i++;\n      } else {\n        result.push(filtered[i]);\n      }\n    }\n\n    while (result.length < row.length) {\n      result.push(0);\n    }\n\n    return result;\n  }\n\n  arraysCompare(arr1, arr2) {\n    return arr1.every((value, index) => {\n      return value === arr2[index];\n    });\n  }\n\n  canMove() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        const value = this.board[row][col];\n\n        if (value === 0) {\n          return true;\n        }\n\n        if (col < this.size - 1 && this.board[row][col + 1] === value) {\n          return true;\n        }\n\n        if (row < this.size - 1 && this.board[row + 1][col] === value) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","Game","initialState","_this","instance","Constructor","size","score","status","board","fill","key","value","moved","row","originalRow","newRow","mergeRow","arraysCompare","addRandomTile","getStatus","reversedRow","reverse","newRowReversed","col","column","push","newColumn","row1","reversedColumn","newColumnReversed","canMove","emptyCells","_emptyCells_Math_floor","Math","floor","random","r","c","filtered","filter","result","mergedValue","arr1","every","index","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$getStatusMessage","$197cd56b15c33885$var$startButton","document","querySelector","$197cd56b15c33885$var$restartButton","$197cd56b15c33885$var$scores","$197cd56b15c33885$var$cells","querySelectorAll","$197cd56b15c33885$var$renderBoard","state","getState","textContent","forEach","cell","num","classList","cls","startsWith","remove","add","concat","$197cd56b15c33885$var$renderScore","winMessage","loseMessage","startMessage","gameStatus","addEventListener","start","restart","e","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.1e9a5a8b.js.map"}