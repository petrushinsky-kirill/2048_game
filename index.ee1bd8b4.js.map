{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\";\n        if (initialState) this.board = [\n            ...initialState\n        ];\n        else this.board = Array.from({\n            length: this.size\n        }, ()=>{\n            return Array(this.size).fill(0);\n        });\n    }\n    moveLeft() {\n        let moved = false;\n        for(let row = 0; row < this.size; row++){\n            const originalRow = this.board[row];\n            const newRow = this.mergeRow(originalRow);\n            if (!this.arraysCompare(originalRow, newRow)) {\n                this.board[row] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.getStatus();\n        }\n    }\n    moveRight() {\n        let moved = false;\n        for(let row = 0; row < this.size; row++){\n            const originalRow = this.board[row];\n            const reversedRow = originalRow.slice().reverse();\n            const newRowReversed = this.mergeRow(reversedRow);\n            const newRow = newRowReversed.reverse();\n            if (!this.arraysCompare(originalRow, newRow)) {\n                this.board[row] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.getStatus();\n        }\n    }\n    moveUp() {\n        let moved = false;\n        for(let col = 0; col < this.size; col++){\n            const column = [];\n            for(let row = 0; row < this.size; row++)column.push(this.board[row][col]);\n            const newColumn = this.mergeRow(column);\n            for(let row = 0; row < this.size; row++)if (this.board[row][col] !== newColumn[row]) {\n                this.board[row][col] = newColumn[row];\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.getStatus();\n        }\n    }\n    moveDown() {\n        let moved = false;\n        for(let col = 0; col < this.size; col++){\n            const column = [];\n            for(let row = 0; row < this.size; row++)column.push(this.board[row][col]);\n            const reversedColumn = column.reverse();\n            const newColumnReversed = this.mergeRow(reversedColumn);\n            const newColumn = newColumnReversed.reverse();\n            for(let row = 0; row < this.size; row++)if (this.board[row][col] !== newColumn[row]) {\n                this.board[row][col] = newColumn[row];\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.getStatus();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return [\n            ...this.board\n        ];\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.status === \"win\" || this.status === \"lose\") return this.status;\n        // Перевірка на перемогу\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this.board[row][col] === 2048) {\n                this.status = \"win\";\n                return this.status;\n            }\n        }\n        if (!this.canMove()) {\n            this.status = \"lose\";\n            return this.status;\n        }\n        this.status = \"playing\";\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.board = Array.from({\n            length: this.size\n        }, ()=>{\n            return Array(this.size).fill(0);\n        });\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.board = Array.from({\n            length: this.size\n        }, ()=>{\n            return Array(this.size).fill(0);\n        });\n        this.score = 0;\n        this.status = \"idle\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const { row: r, col: c } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n    }\n    mergeRow(row) {\n        const filtered = row.filter((value)=>value !== 0);\n        const result = [];\n        for(let i = 0; i < filtered.length; i++)if (filtered[i] === filtered[i + 1]) {\n            const mergedValue = filtered[i] * 2;\n            result.push(mergedValue);\n            this.score += mergedValue;\n            i++;\n        } else result.push(filtered[i]);\n        while(result.length < row.length)result.push(0);\n        return result;\n    }\n    arraysCompare(arr1, arr2) {\n        return arr1.every((value, index)=>{\n            return value === arr2[index];\n        });\n    }\n    canMove() {\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            const value = this.board[row][col];\n            if (value === 0) return true;\n            if (col < this.size - 1 && this.board[row][col + 1] === value) return true;\n            if (row < this.size - 1 && this.board[row + 1][col] === value) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n$09e991522ca7e64e$var$getStatusMessage();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$restartButton = document.querySelector(\".button.restart\");\nconst $09e991522ca7e64e$var$scores = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nfunction $09e991522ca7e64e$var$renderBoard() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    for(let row = 0; row < $09e991522ca7e64e$var$game.size; row++)for(let col = 0; col < $09e991522ca7e64e$var$game.size; col++){\n        const value = state[row][col];\n        const index = row * 4 + col;\n        $09e991522ca7e64e$var$cells[index].textContent = value === 0 ? \"\" : value;\n    }\n    $09e991522ca7e64e$var$styleCells();\n}\nfunction $09e991522ca7e64e$var$renderScore() {\n    $09e991522ca7e64e$var$scores.textContent = $09e991522ca7e64e$var$game.score;\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$renderBoard();\n    $09e991522ca7e64e$var$renderScore();\n    $09e991522ca7e64e$var$getStatusMessage();\n});\n$09e991522ca7e64e$var$restartButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$renderBoard();\n    $09e991522ca7e64e$var$renderScore();\n    $09e991522ca7e64e$var$getStatusMessage();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.status !== \"playing\") return;\n    let moved = false;\n    if (e.key === \"ArrowLeft\") {\n        $09e991522ca7e64e$var$game.moveLeft();\n        moved = true;\n    }\n    if (e.key === \"ArrowRight\") {\n        $09e991522ca7e64e$var$game.moveRight();\n        moved = true;\n    }\n    if (e.key === \"ArrowUp\") {\n        $09e991522ca7e64e$var$game.moveUp();\n        moved = true;\n    }\n    if (e.key === \"ArrowDown\") {\n        $09e991522ca7e64e$var$game.moveDown();\n        moved = true;\n    }\n    if (moved) {\n        $09e991522ca7e64e$var$renderBoard();\n        $09e991522ca7e64e$var$renderScore();\n        $09e991522ca7e64e$var$getStatusMessage();\n    }\n});\nfunction $09e991522ca7e64e$var$getStatusMessage() {\n    const winMessage = document.querySelector(\".message-win\");\n    const loseMessage = document.querySelector(\".message-lose\");\n    const startMessage = document.querySelector(\".message-start\");\n    const gameStatus = $09e991522ca7e64e$var$game.status;\n    if (gameStatus === \"win\") winMessage.classList.remove(\"hidden\");\n    if (gameStatus === \"lose\") loseMessage.classList.remove(\"hidden\");\n    if (gameStatus === \"playing\") startMessage.classList.add(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$styleCells() {\n    $09e991522ca7e64e$var$cells.forEach((cell)=>{\n        const num = cell.textContent;\n        cell.classList.forEach((cls)=>{\n            if (cls.startsWith(\"field-cell--\")) cell.classList.remove(cls);\n        });\n        if (num) cell.classList.add(`field-cell--${num}`);\n    });\n}\n\n\n//# sourceMappingURL=index.ee1bd8b4.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ngetStatusMessage();\n\nconst startButton = document.querySelector('.button.start');\nconst restartButton = document.querySelector('.button.restart');\nconst scores = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\n\nfunction renderBoard() {\n  const state = game.getState();\n\n  for (let row = 0; row < game.size; row++) {\n    for (let col = 0; col < game.size; col++) {\n      const value = state[row][col];\n      const index = row * 4 + col;\n\n      cells[index].textContent = value === 0 ? '' : value;\n    }\n  }\n\n  styleCells();\n}\n\nfunction renderScore() {\n  scores.textContent = game.score;\n}\n\nstartButton.addEventListener('click', () => {\n  game.start();\n  renderBoard();\n  renderScore();\n  getStatusMessage();\n});\n\nrestartButton.addEventListener('click', () => {\n  game.restart();\n  renderBoard();\n  renderScore();\n  getStatusMessage();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.status !== 'playing') {\n    return;\n  }\n\n  let moved = false;\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n    moved = true;\n  }\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n    moved = true;\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n    moved = true;\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n    moved = true;\n  }\n\n  if (moved) {\n    renderBoard();\n    renderScore();\n    getStatusMessage();\n  }\n});\n\nfunction getStatusMessage() {\n  const winMessage = document.querySelector('.message-win');\n  const loseMessage = document.querySelector('.message-lose');\n  const startMessage = document.querySelector('.message-start');\n\n  const gameStatus = game.status;\n\n  if (gameStatus === 'win') {\n    winMessage.classList.remove('hidden');\n  }\n\n  if (gameStatus === 'lose') {\n    loseMessage.classList.remove('hidden');\n  }\n\n  if (gameStatus === 'playing') {\n    startMessage.classList.add('hidden');\n  }\n}\n\nfunction styleCells() {\n  cells.forEach((cell) => {\n    const num = cell.textContent;\n\n    cell.classList.forEach((cls) => {\n      if (cls.startsWith('field-cell--')) {\n        cell.classList.remove(cls);\n      }\n    });\n\n    if (num) {\n      cell.classList.add(`field-cell--${num}`);\n    }\n  });\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n\n    if (initialState) {\n      this.board = [...initialState];\n    } else {\n      this.board = Array.from({ length: this.size }, () => {\n        return Array(this.size).fill(0);\n      });\n    }\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const originalRow = this.board[row];\n      const newRow = this.mergeRow(originalRow);\n\n      if (!this.arraysCompare(originalRow, newRow)) {\n        this.board[row] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.getStatus();\n    }\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const originalRow = this.board[row];\n      const reversedRow = originalRow.slice().reverse();\n      const newRowReversed = this.mergeRow(reversedRow);\n      const newRow = newRowReversed.reverse();\n\n      if (!this.arraysCompare(originalRow, newRow)) {\n        this.board[row] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.getStatus();\n    }\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const column = [];\n\n      for (let row = 0; row < this.size; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      const newColumn = this.mergeRow(column);\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.board[row][col] !== newColumn[row]) {\n          this.board[row][col] = newColumn[row];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.getStatus();\n    }\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const column = [];\n\n      for (let row = 0; row < this.size; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      const reversedColumn = column.reverse();\n\n      const newColumnReversed = this.mergeRow(reversedColumn);\n      const newColumn = newColumnReversed.reverse();\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.board[row][col] !== newColumn[row]) {\n          this.board[row][col] = newColumn[row];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.getStatus();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return [...this.board];\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.status === 'win' || this.status === 'lose') {\n      return this.status;\n    }\n\n    // Перевірка на перемогу\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 2048) {\n          this.status = 'win';\n\n          return this.status;\n        }\n      }\n    }\n\n    if (!this.canMove()) {\n      this.status = 'lose';\n\n      return this.status;\n    }\n\n    this.status = 'playing';\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.board = Array.from({ length: this.size }, () => {\n      return Array(this.size).fill(0);\n    });\n\n    this.score = 0;\n    this.status = 'playing';\n\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = Array.from({ length: this.size }, () => {\n      return Array(this.size).fill(0);\n    });\n\n    this.score = 0;\n    this.status = 'idle';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const { row: r, col: c } =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  mergeRow(row) {\n    const filtered = row.filter((value) => value !== 0);\n    const result = [];\n\n    for (let i = 0; i < filtered.length; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        const mergedValue = filtered[i] * 2;\n\n        result.push(mergedValue);\n        this.score += mergedValue;\n        i++;\n      } else {\n        result.push(filtered[i]);\n      }\n    }\n\n    while (result.length < row.length) {\n      result.push(0);\n    }\n\n    return result;\n  }\n\n  arraysCompare(arr1, arr2) {\n    return arr1.every((value, index) => {\n      return value === arr2[index];\n    });\n  }\n\n  canMove() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        const value = this.board[row][col];\n\n        if (value === 0) {\n          return true;\n        }\n\n        if (col < this.size - 1 && this.board[row][col + 1] === value) {\n          return true;\n        }\n\n        if (row < this.size - 1 && this.board[row + 1][col] === value) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","score","status","board","Array","from","length","fill","moveLeft","moved","row","originalRow","newRow","mergeRow","arraysCompare","addRandomTile","getStatus","moveRight","reversedRow","slice","reverse","newRowReversed","moveUp","col","column","push","newColumn","moveDown","reversedColumn","newColumnReversed","getScore","getState","canMove","start","restart","emptyCells","r","c","Math","floor","random","filtered","filter","value","result","i","mergedValue","arr1","arr2","every","index","$09e991522ca7e64e$var$getStatusMessage","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$restartButton","$09e991522ca7e64e$var$scores","$09e991522ca7e64e$var$cells","querySelectorAll","$09e991522ca7e64e$var$renderBoard","state","textContent","forEach","cell","num","classList","cls","startsWith","remove","add","$09e991522ca7e64e$var$renderScore","winMessage","loseMessage","startMessage","gameStatus","addEventListener","e","key"],"version":3,"file":"index.ee1bd8b4.js.map"}